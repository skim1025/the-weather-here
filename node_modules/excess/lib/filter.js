/*  filter.js

    Copyright (C) 2013, 2014, Connected Sets

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
"use strict";

( function( exports ) {
  var XS;
  
  if ( typeof require === 'function' ) {
    XS = require( './xs.js' ).XS;
    
    require( './code.js' );
    require( './pipelet.js' );
  } else {
    XS = exports.XS;
  }
  
  var log      = XS.log
    , Code     = XS.Code
    , Pipelet  = XS.Pipelet
    , Query    = XS.Query
    , extend_2 = XS.extend_2
  ;
  
  var push = Array.prototype.push;
  
  /* -------------------------------------------------------------------------------------------
     de&&ug()
  */
  var de = false;
  
  function ug( m ) {
    log( "xs filter, " + m );
  } // ug()
  
  /* -------------------------------------------------------------------------------------------
     parse_filter( f )
     
     A trivial function code parser for the pipelet filter(). It is used to inline filter
     functions within unrolloed loops generated by filter().
     
     Parameters:
       - f: (Function) a filter function to parse
     
     This is a trivial regular-expression-based function code parser. It is not meant to parse
     all functions but to parse functions of the form:
       function( <parameters> ) {
         <some code with no return statement>
         
         return <return expression>
       }
       
     If it fails to parse the function it will return the function itself.
     
     If it succeeds it returns an Object with the following properties:
       - parameters: an Array of parameter names
       - code: <some code with no return statement>
       - condition: <return expression>
     
     Example:
     
     The following filter function:
       function (city, c, cities) {
         return city.country === 'USA';
       }
       
     Will be parsed and return:
       {
         parameters: [ "city", "c", "cities" ],
         code      : "",
         condition : "city.country === 'USA'"
       }
       
     Possible improvements:
       Proper AST parser:
         This could use the excellent Acorn (https://github.com/marijnh/acorn/)
         parser but uglified size is still significant for a compact parser:
          22759 bytes, and 9985 bytes gziped
         
         Speed considerations would most likely not be a problem since Acorn
         is one of the fastest parsers and function parsing would be done once
         after loading a script.
         
         This would allow for much more possibilities such as:
           - unrestricted complexity
           - variable name substitution to guaranty zero conflicts with
             generated code
           - evaluation to remove constant code
           - sandboxing, which could be useful to execute on the server
             filters coming from clients.
             
       Simplified AST parser:
         This would allow to generate query structures that could be transported
         to the server side.
  */
  function parse_filter( f ) {
    if ( typeof f !== 'function' ) return f;
    
    var s = f.toString();
    
    var parsed = /function\s*\(([^\)]*)\)\s*{\s*(.*)\s*return\s*([^;]*)[;\s]*}/.exec( s );
    
    if ( ! parsed || parsed.length < 4 ) return f;
    
    var parameters = parsed[ 1 ].replace( / /g, '' );
    
    parameters = parameters == '' ? [] : parameters.split( ',' );
    
    parsed = { parameters: parameters, code: parsed[ 2 ], condition: parsed[ 3 ], f: f };
    
    de&&ug( 'parse_filter(), parsed:' + log.s( parsed ) + ', function: ' + s );
    
    return parsed;
  } // parse_filter()
  
  /* -------------------------------------------------------------------------------------------
     filter( filter [, options ] )
     
     Filter a set by a filter function or query.
     
     Parameters:
       - filter: can be a Function, an Array or a Query Pipelet:
         - (Function) signature:
             filter( value [, index [, values ] ] )
             
             If the filter function returns a "truly" value, the current value is
             "added" to the downstream pipelet.
           
         - (Array of Objects): the filter is a static query, e.g.:
             states = [
               { country: 'USA', state 'Michigan' }
               { country: 'USA', state 'Illinois' }
             ];
             
             // Filter cities from the states of Michigan and Illinois
             cities.filter( states );
           
         - (Pipelet): the filter is a query dataflow processed using filter_query(). This allows
             dynamic filters from dataflows.
             
             states = xs.set( [ { country: 'USA', state 'Michigan' } ] );
             
             // Filter cities from the state of Michigan
             cities.filter( states );
             
             // Add the state of Illinois
             states.add( [ { country: 'USA', state 'Illinois' } ] );
             
             // From now on, the above filter also provides the cities in Illinois in addition
             // to Michigan
             
             // ...
             
             states._remove( [ { country: 'USA', state 'Michigan' } ] )
             
             // Now the filter no longer provides cities from Michigan, and only cities from
             // Illinois are sent downtream
           
       - options (optional) (Object):
           - not_closure (Boolean): if true, filter() will attempt to parse the filter
             function to generate code.
             
             !! Warning: if the filter function is a closure, its activation context will be
               lost which most likely will have the closure throwing Reference Errors.
             
           - filter_keys (Array): when filter is a query, filter_keys may be used to define
               and-terms present in all filter AND-expressions. Doing so allows to lazy-fetch
               the filter query for a subset of all AND-terms, improving the memory footprint
               and execution time of query updates.
               
               A typical example is when differenciating between many flows in an authorization
               filter:
               
                 source
                   .filter( authorizations, { filter_keys: [ 'flow' ] )
                   ._output._add_destination( socket._input )
               
               Doing so, says that all authorizations AND-expression have a flow attribute. When
               the socket requests a flow 'user', all authorizations for the 'user' flow are
               fetched.
  */
  function Filter( filter, options ) {
    this._output || ( this._output = new Filter.Output( this, 'filter_out' ) );
    
    Pipelet.call( this, options );
    
    options = this._options;
    
    var that = this;
    
    this._downstream_query = null;
    this._filter_query     = null;
    
    this._query_controller = null; // a controller pipelet for dynamic filter queries
    
    // Function-based filters attributes
    this._filter           = null;
    
    switch ( typeof filter ) {
      case "function":
        this._filter = options.not_closure ? parse_filter( filter ) : filter;
      break;
      
      case "object":
        if ( filter instanceof Pipelet || filter instanceof Array ) {
          this._init_filter_query( filter );
          
          break;
        }
      // pass-though 
      default:
        throw new Error( "filter(), filter should be a function, a Query Pipelet, or a Query Array" );
    }
    
    return this;
  } // Filter()
  
  Filter.Output = Pipelet.Output.subclass(
    function( p, name ) { Pipelet.Output.call( this, p, name ) },
    
    function ( Super ) { return {
    
    _fetch: function( receiver, query ) {
      var p = this.pipelet;
      
      if ( p._filter ) return Pipelet.Output.prototype._fetch.call( this, receiver, query ); // filter locally using this.__transform()
      
      // Filter is using a Query in upstream pipelet
      var q = p._input.query;
      
      if ( query ) q = new Query( q.query ).and( query );
      
      return p._input.__fetch_source( receiver, q.query );
    }, // _fetch()
    
    update_upstream_query: function( removes, adds ) {
      var p = this.pipelet;
      
      if ( p._filter ) {
        // Using filter a function, _update upstream query directly with downstream changes
        // will then be filtered by __transform()
        
        Super.update_upstream_query.call( this, removes, adds );
        
        return this;
      }
      
      // var name = de && this._get_name( 'update_upstream_query' );
      
      if ( adds.length ) {
        var filter_keys = p._options.filter_keys;
        
        if ( filter_keys ) {
          // update filter query using filter keys
          // Example of filter keys:
          //   [ 'flow' ]
          var query_controller = p._query_controller, filter_adds = [];
          
          for ( var i = -1, e; e = adds[ ++i ]; ) {
            for ( var j = -1, k, e1 = {}; k = filter_keys[ ++j ]; ) {
              e1[ k ] = e[ k ];
            }
            
            filter_adds.push( e1 );
          }
          
          // get additional filters from query controllers
          query_controller._input.update_upstream_query( [], filter_adds );
          
          // Prevent memory leak from continusly added filter_adds to query_controller
          // Because we do not update it on removes from downstream query updates
          query_controller._input.query.discard_optimized();
        }
      }
      
      var downstream_query = p._downstream_query;
      
      downstream_query.add( adds ).remove( removes );
      
      if ( downstream_query.adds.length || downstream_query.removes.length ) {
        // downstream_query was updated
        
        // Calculate changes of upstream query then apply these upstream
        Super.update_upstream_query.apply( this, p._get_upstream_query_changes() );
        
        downstream_query.discard_operations();
      }
      
      return this;
    } // update_upstream_query()
  } } ); // Filter.Output()
  
  Pipelet.Build( 'filter', Filter, function( Super ) { return {
    /* -----------------------------------------------------------------------------------------
       _get_upstream_query_changes()
       
       AND filter query with downstream query then get changes with the previous upstream
       query.
       
       We have 3 queries:
         - this._downstream_query : query from destination pipelets
         - this._filter_query     : filter query updated by the query controller
         - this._input.query      : query for upstream pipelets
       
       ToDo: make this incremental instead of recalculating AND then changes
    */
    _get_upstream_query_changes: function() {
      var downstream_query = this._downstream_query
        ,   upstream_query = this._input.     query
        ,     filter_query = this.    _filter_query
        
        // and_query = downstream_query AND filter_query 
        ,        and_query = new Query( downstream_query ).and( filter_query )
        
        // changes = upstream_query - and_query 
        ,          changes = upstream_query.differences( and_query );
      ;
      
      de&&ug( this._get_name( '_get_upstream_query_changes' )
        + 'changes: '            + log.pretty( changes                )
        + ', ANDed query: '      + log.pretty( and_query       .query )
        + ', upstream query: '   + log.pretty( upstream_query  .query )
        + ', downstream query: ' + log.pretty( downstream_query.query )
        + ', filter query: '     + log.pretty( filter_query    .query )
      );
      
      return changes;
    }, // _get_upstream_query_changes()
    
    _init_filter_query: function( filter ) {
      // This pipelet becomes a pass-through
      this._add    = Super.__emit_add;
      this._remove = Super.__emit_remove;
      this._update = Super.__emit_update;
      
      // __transform should never be called as the default would not filter anything
      this.__transform = null;
      
      this._add_query_source( filter );
      
      return this;
    }, // _init_filter_query()
    
    _add_query_source: function( filter, options ) {
      var query_controller = this._query_controller;
      
      if ( ! query_controller ) {
        var that        = this
          , options     = this._options
          , filter_keys = options.filter_keys
          , q
        ;
        
        // ToDo: query controller should become an Input.
        this._query_controller = query_controller
          = new Pipelet( { name: options.name + ' Query Controller' } )
        ;
        
        if ( filter_keys ) {
          de&&ug( this._get_name( '_add_query_source' ) + 'filter keys: ' + log.s( filter_keys ) );
          
          // Filter expressions will be queried according to input queries from the
          // filter's downstream pipelet, making this filter controller lazy
          
          // Do not request any filter for now, wait for update_upstream_query()
          q = null;
        } else {
          // There are no filter keys, this input must be greedy and request all filter expressions
          q = Query.pass_all; // get all filter expressions
        }
        
        query_controller._input.query = q;
        
        this._input.query      = new Query( [] ).generate(); // nul filter
        this._downstream_query = new Query( [] );
        this._filter_query     = new Query( [] );
        
        query_controller._add    = add;
        query_controller._remove = remove;
      }
      
      query_controller._add_source( filter ); // filter may be an Array of Objects
      
      return this;
      
      function add( or_terms, options ) {
        de&&ug( this._get_name( '_add_query_source()#add' ) + 'or_terms: ' + log.s( or_terms ) );
        
        that._filter_query.add( or_terms );
        
        options && options._t && options._t.more || that._update_query( options );
        
        return this;
      } // add()
      
      function remove( or_terms, options ) {
        de&&ug( this._get_name( '_add_query_source()#remove' ) + 'or_terms: ' + log.s( or_terms ) );
        
        that._filter_query.remove( or_terms );
        
        options && options._t && options._t.more || that._update_query( options );
        
        return this;
      } // remove()
    }, // _add_query_source()
    
    _update_query: function( options ) {
      var filter_query = this._filter_query;
      
      if ( filter_query.adds.length || filter_query.removes.length ) {
        var changes = this._get_upstream_query_changes()
          , removes = changes[ 0 ]
          , adds    = changes[ 1 ]
        ;
        
        // Now that operations will be applied upstream of the pipelet, we can discard operations
        filter_query.discard_operations();
        
        de&&ug( '_update_query(), adds: ' + log.s( adds ) + ', removes: ' + log.s( removes ) );
        
        var input  = this._input
          , source = input.source
          , o      = extend_2( {}, options )
        ;
        
        if ( source && removes.length ) {
          o.operation = 'remove';
          o.count = adds.length ? 2 : 1
          
          source._transactional_fetch( input, removes, o, query_tree_update_and_fetch_adds );
        } else {
          query_tree_update_and_fetch_adds();
        }
      }
      
      return this;
      
      function query_tree_update_and_fetch_adds( transaction ) {
        // ToDo: updating upstream queries through source.query_update() must be synchronized with source._fetch()
        
        // Update upstream query trees and queries
        input.update_upstream_query.apply( input, changes );
        
        if ( source && adds.length ) {
          o.transaction = transaction;
          
          source._transactional_fetch( input, adds, o );
        }
      } // query_tree_update_and_fetch_adds()
    }, // _update_query()
    
    __transform: function( objects ) {
      var filter = this._filter
        , vars = [ '_out = []' ]
        , first, u, index = 'i', objects_variable = '_o'
      ;
      
      switch( typeof filter ) {
        case 'object': // { parameters: [ 'o' ], code: 'o.country === "Morocco"', condition: '' }
          var p = filter.parameters;
          
          if ( p.length ) {
            if ( p.length > 1 ) index = p[ 1 ];
            if ( p.length > 2 ) objects_variable = p[ 2 ];
            
            var o = p[ 0 ];
            
            vars.push( o );
            
            first = o + ' = ' + objects_variable + '[ ++' + index + ' ]; ' + filter.code + ' if ( ' + filter.condition + ' ) _out.push( ' + o + ' );';
            
            break;
          }
          
          filter = filter.f;
        // fall-through
        
        case 'function':
          vars.push( 'f = filter', 'o' );
          
          first = 'if ( f( o = _o[ ++i ], i, _o ) ) _out.push( o );';
        break;
      }
      
      vars.push( index + ' = -1', 'l = ' + objects_variable + '.length' );
      
      eval( new Code()
        ._function( 'this.__transform', null, [ objects_variable ] )
          ._var( vars )
          
          .unrolled_while( first, u, u, { index: index } )
          
          .add( 'return _out' )
        .end( 'Filter..__transform()' )
        .get()
      );
      
      return this.__transform( objects );
    }, // __transform()
    
    // ToDo: _update will mostly no longer being called, because Set does not implement update
    // This code is no-longer tested in the test suite, therefore consider removing this code
    /*
    _update: function( updates, options ) {
      var filter = this._filter;
      
      switch( typeof filter ) {
        case 'object':
          filter = filter.f;
        // fall-through
        
        case 'function':
          this._update = function( updates ) {
            var l = updates.length, f = filter
              , removed = [], updated = [], added = []
              , more = options && options._t && options._t.more
            ;
            
            for ( var i = -1; ++i < l; ) {
              var u = updates[ i ], u0 = u[ 0 ], u1 = u[ 1 ];
              
              if ( f( u0 ) ) {
                if ( f( u1 ) ) {
                  updated.push( u );
                } else {
                  removed.push( u0 );
                }
              } else if ( f( u1 ) ) {
                added.push( u1 );
              }
            }
            
            return this.__emit_operations( added, removed, updated, XS.options_forward( options ) );
          };
          
          return this._update( updates );
        break;
      }
    } // _update()
    */
  }; } ); // Filter instance methods
  
  /* -------------------------------------------------------------------------------------------
     flow( 'name' )
     
     Filters a dataflow by the 'flow' attribute.
     
     Parameters:
       - name (String): the name of the flow to extract
  */
  Pipelet.Compose( 'flow', function( source, flow_name, options ) {
    return source.filter( [ { flow: flow_name } ], options );
  } );
  
  /* -------------------------------------------------------------------------------------------
     module exports
  */
  XS.add_exports( {
    'Filter': Filter
  } );
  
  de&&ug( "module loaded" );
} )( this ); // filter.js
